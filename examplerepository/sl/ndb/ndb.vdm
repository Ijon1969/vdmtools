\documentclass{article}
\usepackage{a4}
\usepackage{makeidx}
\usepackage{vdmsl-2e}

\newcommand{\StateDef}[1]{{\bf #1}}
\newcommand{\TypeDef}[1]{{\bf #1}}
\newcommand{\TypeOcc}[1]{{\it #1}}
\newcommand{\FuncDef}[1]{{\bf #1}}
\newcommand{\FuncOcc}[1]{#1}
\newcommand{\ModDef}[1]{{\tiny #1}}

\makeindex

\begin{document}

\title{The Specification of a Binary Relational Database System (NDB)}
\author{Submitted by Rich Bradford}
\maketitle

\begin{vdm_al}
module Database

  exports all

  definitions

    types
  
      PhysicalFile ::
        headersec : map seq of char to seq of Parameter
        datasec   : map nat to ([Scope] * Record);

      HeaderEntity ::
        name  : seq of char
        parms : seq of Parameter;

      Scope :: ;

      Record = SimpleRecord | SuperRecord ;

      SuperRecord ::
        rec_list : seq of SimpleRecord;

      SimpleRecord ::
        name  : seq of char
        parms : seq of Parameter;

      Parameter =
        StringParameter |
        RealParameter |
        IntegerParameter |
        EntityInstanceName |
        EnumerationParameter |
        BinaryParameter |
        ListParameter |
        TypedParameter |
        OmittedParameter |
        UnknownParameter ;

      StringParameter ::
        data : seq of char;

      RealParameter ::
        data : real;

      IntegerParameter ::
        data : int;

      EntityInstanceName ::
        data : nat;

      EnumerationParameter ::
        data : seq of char;

      BinaryParameter ::
        data : bool;

      ListParameter ::
        data : seq of Parameter;

      TypedParameter::
        name : seq of char
        data : Parameter;

      OmittedParameter:: ;

      UnknownParameter::

    operations

       CheckReferences: Parameter ==> set of nat
       CheckReferences(parm) ==
          cases parm:
            mk_EntityInstanceName(id) -> return {id},
            mk_ListParameter(parms) ->
               ( dcl res : set of nat := {};
                 for subparm in parms do
                   res := res union CheckReferences(subparm);
                 return res),
            others -> return {}
          end;

       FindAllReferencesToEntity: nat ==> set of nat
       FindAllReferencesToEntity (eid) ==
         let eins = dom in_model.datasec \ {eid} in
            ( dcl res : set of nat := {};
              for all ein in set eins do
                let mk_(-,mk_SimpleRecord(-,parms)) = in_model.datasec(ein) in
                  if eid in set CheckReferences(mk_ListParameter(parms)) then
                    res := res union {ein};
               return res
             );

       FindAllInstances: seq of char ==> set of nat
       FindAllInstances(nm) ==
          let eins = dom in_model.datasec in
             ( dcl res : set of nat := {};
               for all ein in set eins do
                  let mk_(-,rec) = in_model.datasec(ein) in
                     if IsA (rec, nm) then
                       res := res union {ein};
               return res
             );
 
       LookUpEntityInstance: nat ==> [Record]
       LookUpEntityInstance (ein) ==
          let eins = dom in_model.datasec in
             if ein in set eins then
               let mk_(-,rec) = in_model.datasec(ein) in
                  return rec
             else
               return nil;

       TransformRmVertex: nat ==> nat
       TransformRmVertex(rmv_id) ==
          let mk_SimpleRecord(-,parms) = LookUpEntityInstance (rmv_id) in
          let mk_EntityInstanceName(cpnt_id) = parms(5) in
            return cpnt_id;

       TransformRmEdge: nat ==> set of (nat * nat)
       TransformRmEdge (rme_id) ==
         let mk_SimpleRecord(-,parms) = LookUpEntityInstance (rme_id) in
         let mk_ListParameter(rmees) = parms(3) in
           ( dcl res : set of (nat * nat) := {};
             for rmee in rmees do
                let mk_EntityInstanceName(rmee_id) = rmee in
                let {rmee_ref} = FindAllReferencesToEntity(rmee_id)\{rme_id} in
                  res := res union {mk_(rme_id, TransformRmVertex(rmee_ref))};
             return res
           );

       TransformRmLoop: nat ==> seq of nat
       TransformRmLoop (rml_id) ==
          let mk_SimpleRecord(-,parms) = LookUpEntityInstance (rml_id) in
          let mk_ListParameter(rmess) = parms(2) in
            ( dcl res : set of (nat * nat) := {};
              for rmes in rmess do
                let mk_EntityInstanceName(rmes_id) = rmes in
                let rme_ref = FindAllReferencesToEntity(rmes_id) \ {rml_id} in
                   for all rme_id in set rme_ref do
                     res := res union TransformRmEdge(rme_id);
              return SortPoints(res)
            );

       Transform: () ==> set of seq of nat
       Transform () ==
          let rmls = FindAllInstances("RM_LOOP") in
            ( dcl res : set of seq of nat := {};
              for all rml in set rmls do
                 res := res union {TransformRmLoop(rml)};
              return res
            );

      Create: set of seq of nat ==> ()
      Create (AbstrMod) ==
         ( dcl ds : map nat to ([Scope] * Record) := {|->},
               LookUpTable : map nat to nat := {|->},
               polylist : seq of EntityInstanceName := [];
           for all ent in set Collect(AbstrMod) do
             ( last_id := last_id + 1;
               LookUpTable := LookUpTable munion { ent |-> last_id };
               let mk_SimpleRecord(-,parms) = LookUpEntityInstance(ent) in
                 ds := ds munion { last_id |-> mk_(nil, 
                   mk_SimpleRecord("VERTEX",[parms(3)]))}
             );
           for all poly in set AbstrMod do
             ( last_id := last_id + 1;
               ds := ds munion { last_id |-> mk_(nil,
                 mk_SimpleRecord("POLYLINE",[mk_ListParameter(
                   MapInToOut(poly,LookUpTable))]))};
               polylist := polylist ^ [mk_EntityInstanceName(last_id)]
             );
           ds := ds munion { last_id + 1 |-> mk_(nil,
             mk_SimpleRecord("DRAWING",[mk_ListParameter(polylist)]))};
           out_model := mk_PhysicalFile (
             { "FILE_NAME" |-> [mk_UnknownParameter()],
               "FILE_DESCRIPTION" |-> [mk_UnknownParameter()],
               "FILE_SCHEMA" |-> [mk_UnknownParameter()] }
             , ds )
        );

       DoMapping: PhysicalFile ==> PhysicalFile
       DoMapping (pf) ==
         ( in_model := pf;
           Create(Transform());
           return out_model
         )

    functions
      MapInToOut : seq of nat * map nat to nat -> seq of EntityInstanceName
      MapInToOut (ins, lut) ==
         if ins = [] then
           []
         else
           [mk_EntityInstanceName(lut(hd ins))] ^ MapInToOut(tl ins, lut);

      Collect : set of seq of nat -> set of nat
      Collect (theSet) ==
        cases theSet:
          {} -> {},
          others -> let e in set theSet in elems e union Collect(theSet\{e})
        end;

      IsA: Record * seq of char -> bool
      IsA(rec,nm) ==
        if is_SimpleRecord(rec) then
          let mk_SimpleRecord (name,-) = rec in
             nm = name
        else
          false;

      SortInnerLeft: set of (nat * nat) * nat -> seq of nat
      SortInnerLeft (theSet, goal) ==
         cases theSet:
           {} -> [],
           others ->
             let mk_(a,b) in set theSet be st a = goal in
                SortInnerRight(theSet\{mk_(a,b)}, b)
         end;

      SortInnerRight: set of (nat * nat) * nat -> seq of nat
      SortInnerRight (theSet,goal) ==
         cases theSet:
           {} -> [],
           others ->
             let mk_(a,b) in set theSet be st b = goal in
                [b] ^ SortInnerLeft(theSet\{mk_(a,b)}, a)
         end;

      SortPoints : set of (nat * nat) -> seq of nat
      SortPoints (theSet) ==
         let mk_(a,b) in set theSet in
           SortInnerRight(theSet\{mk_(a,b)},b)

    state Kernel of
      in_model : PhysicalFile
      out_model : PhysicalFile
      last_id : nat
    init
      k == k = mk_Kernel(
                 mk_PhysicalFile({|->},{|->}),
                 mk_PhysicalFile({|->},{|->}),
                 0
               )
    end

end Database
\end{vdm_al}


\printindex
\end{document}
types

	Eid = token;
	Value = token; 
	Esetnm = token;
	Rnm = token;
	
	Maptp = <ONETOONE>|<ONETOMANY>|<MANYTOONE>|<MANYTOMANY>;

	Tuple :: fv : Eid
		 tv : Eid;

	Rinf :: tp : Maptp
		 r : set of Tuple;
		 
	Rkey :: nm : [Rnm]
		fs : Esetnm
		ts : Esetnm

functions

checkinv : map Esetnm to set of Eid * map Eid to [Value] * map Rkey to
Rinf -> bool
checkinv (esm,em,rm) ==
dom em = dunion rng esm and
              forall rk in set dom rm &
                 let mk_Rkey(-,fs,ts)=rk in
                 let mk_Rinf(tp,r) = rm(rk) in
                        {fs,ts} subset dom esm and
                        (tp = <ONETOMANY> => forall t1,t2 in
                        set r & t1.tv = t2.tv  => t1.fv = t2.fv) and
                        (tp = <MANYTOONE> => forall t1,t2 in
                        set r & t1.fv = t2.fv =>t1.tv = t2.tv) and
                        (tp = <ONETOONE> => forall t1,t2 in
                        set r & t1.fv = t2.fv <=> t1.tv = t2.tv) and
                        forall mk_Tuple(fv,tv) in set r & fv
                        in set esm(fs) and tv in set esm(ts)



state Ndb of

	 esm : map Esetnm to set of Eid
	 em  : map Eid to [Value]
	 rm  : map Rkey to Rinf

	 inv mk_Ndb(esm,em,rm) == checkinv (esm,em,rm)

init  ndb == ndb = mk_Ndb({|->},{|->},{|->})
end

	operations

	
	ADDES(es:Esetnm)
	ext wr esm : map Esetnm to set of Eid
	pre es not in set dom esm
	post esm = esm~ munion {es |-> {}};

	DELES(es:Esetnm)
	ext wr esm : map Esetnm to set of Eid
	    rd rm  : map Rkey to Rinf
	pre es in set dom esm and esm(es) = {} and
	    es not in set {rk.fs | rk in set dom rm } union {rk.ts |
	    rk in set dom rm}
	post esm = {es} <-: esm~;


	ADDENT(memb : set of Esetnm, val : [Value]) eid :Eid
	ext wr esm : map Esetnm to set of Eid
	    wr em  : map Eid to [Value]
	pre memb subset dom esm
	post eid not in set dom em~ and
	     em = em~ munion {eid |-> val} and
	     esm = esm~ ++ {es |-> esm~(es) union {eid} | es in set
	     memb };

	DELENT(eid:Eid)
	ext wr esm : map Esetnm to set of Eid
	    wr em  : map Eid to [Value]
	    rd rm  : map Rkey to Rinf
	pre eid in set dom em and
	    forall t in set dunion{ri.r|ri in set rng rm}& t.fv <>
	    eid and t.tv <> eid
	post esm = {es |-> esm~(es) \ {eid} | es in set dom esm~} and
	     em = {eid} <-: em~;

	ADDREL( rk:Rkey, tp:Maptp)
	ext rd esm : map Esetnm to set of Eid
	    wr rm  : map Rkey to Rinf
	pre {rk.fs,rk.ts} subset dom esm and
	    rk not in set dom rm
	post rm = rm~ munion {rk |-> mk_Rinf(tp,{})};

	DELREL (rk:Rkey)
	ext wr rm : map Rkey to Rinf
	pre rk in set dom rm and (rm(rk)).r ={}
	post rm ={rk} <-:rm~;

	ADDTUP (fval,tval : Eid, rk:Rkey)
	ext wr rm  : map Rkey to Rinf
	    rd esm : map Esetnm to set of Eid
	    rd em  : map Eid to [Value]   
	pre rk in set dom rm and 
	    let ri = mu(rm(rk),r |-> (rm(rk)).r union
	    {mk_Tuple(fval,tval)}) in
		checkinv (esm,em,rm ++ {rk |->ri})
	post let ri =mu(rm~(rk),r |-> (rm~(rk)).r union
	{mk_Tuple(fval,tval)}) in rm =rm~ ++ {rk |->ri};

	DELTUP(fval,tval:Eid, rk:Rkey)
	ext wr rm : map Rkey to Rinf
	pre rk in set dom rm
	post let ri = mu(rm~(rk),r |-> (rm~(rk)).r \
	     {mk_Tuple(fval,tval)}) in
	     rm =rm~ ++ {rk |->ri}
\end{vdm_al}
\end{document}